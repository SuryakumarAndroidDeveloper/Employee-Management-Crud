@model List<MyCaRt.Models.ProductModel>

@{
    ViewData["Title"] = "Create Product";
}
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">
        @TempData["SuccessMessage"]
    </div>
}
@if (TempData["ErrorMessageCount"] != null)
{
    <div class="alert alert-danger">
        @TempData["ErrorMessageCount"]
    </div>
}
<style>
    .my-form .form-group .row {
        margin-bottom: 10px;
    }

        .my-form .form-group .row .col-md-3,
        .my-form .form-group .row .col-md-6 {
            display: inline-block;
            width: calc(100% / 7 - 10px);
            margin-right: 0px;
        }

            .my-form .form-group .row .col-md-3:last-child,
            .my-form .form-group .row .col-md-6:last-child {
                margin-right: 0;
            }

    .my-form .form-control {
        width: 100%;
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }

    .my-form .form-control-file {
        width: auto;
    }

    .form-control-sm {
        padding: 0.25rem 0.2rem;
        font-size: 0.75rem;
    }

    img {
        max-width: 100px;
        max-height: 100px;
        margin-top: 10px;
    }

    .file-input-container {
        display: flex;
        align-items: center;
        gap: 10px; /* Adjust the gap as needed */
    }

        .file-input-container img {
            display: none;
        }

</style>
<hr />

<h2>Create Product</h2>
<div class="container">
    <form enctype="multipart/form-data" id="productForm">
        <div id="productFields" >
            <div class="product-field">
                <div class="form-group row">
                    <div class="col-md-3">
                        <label asp-for="@Model[0].Product_Category" id="Product_Category" class="control-label">Choose Category</label>
                        <select asp-for="@Model[0].Product_Category" name="[0].Product_Category" class="form-control form-control-sm custom-select productcategory" asp-items="@ViewBag.CategoryData">
                            <option id="productcategory" value="">Select Product Category</option>
                        </select>
                        <span asp-validation-for="@Model[0].Product_Category" class="text-danger"></span>
                    </div>
                    <div class="col-md-3">
                        <label asp-for="@Model[0].Product_Code" class="control-label">Product Code</label>
                        <input asp-for="@Model[0].Product_Code" class="form-control form-control-sm" />
                        <span asp-validation-for="@Model[0].Product_Code" class="text-danger"></span>
                        <span id="_0_Product_Code_Error" class="text-danger"></span>
                    </div>
                    <div class="col-md-3">
                        <label asp-for="@Model[0].Product_Name" class="control-label">Product Name</label>
                        <input asp-for="@Model[0].Product_Name" class="form-control form-control-sm" />
                        <span asp-validation-for="@Model[0].Product_Name" class="text-danger"></span>
                    </div>
                    <div class="col-md-3">
                        <label asp-for="@Model[0].Product_Price" class="control-label">Product Price</label>
                        <input type="decimal" asp-for="@Model[0].Product_Price" class="form-control form-control-sm" />
                        <span id="_0_Product_Price_Error" asp-validation-for="@Model[0].Product_Price" class="text-danger"></span>
                    </div>
                    <div class="col-md-3">
                        <label asp-for="@Model[0].Product_Description" class="control-label">Description</label>
                        <input asp-for="@Model[0].Product_Description" class="form-control form-control-sm" />
                        <span asp-validation-for="@Model[0].Product_Description" class="text-danger"></span>
                    </div>
                    <div class="col-md-3">
                        <label asp-for="@Model[0].Available_Quantity" class="control-label">Available Quantity</label>
                        <input type="number" asp-for="@Model[0].Available_Quantity" class="form-control form-control-sm" />
                        <span asp-validation-for="@Model[0].Available_Quantity" class="text-danger"></span>
                    </div>
                    <div class="col-md-3">
                        <label asp-for="@Model[0].ImageName" class="control-label">Select Image</label>
                        <div class="file-input-container">
                        <input type="file" name="ImageName" class="form-control form-control-sm" onchange="uploadImage(this, 0)" />
                        <span id="filepathError" class="text-danger"></span>
                        <input type="hidden" name="[0].FilePath" />
                        <input type="hidden" name="[0].ImageName"/>
                        <img id="imagePreview0" src="#" alt="Image Preview" style="display:none; width:100px; height:100px;" />
                        </div>
                    </div>
                </div>
                
            </div>
        </div>
        <button type="button" id="addSameCategoryProduct" class="btn btn-primary">Add Same Category Product</button>
        <button type="submit" class="btn btn-success">Submit</button>
    </form>
</div>

@section Scripts {
    <script>
        //upload the image in local and get the path of the image
        function uploadImage(input, index) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    // Display the image preview
                    var previewElement = document.getElementById('imagePreview' + index);
                    previewElement.src = e.target.result;
                    previewElement.style.display = 'inline';
                }

                reader.readAsDataURL(input.files[0]);
                var formData = new FormData();
                formData.append("ImageName", input.files[0]);
                //console.log(formData);
                $.ajax({
                    url: '/Product/UploadImage',
                    type: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false,
                    success: function (response) {
                        if (response.filePath) {
                            // Find the closest product field and set the hidden file path input
                            $(input).closest('.product-field').find('input[name$=".FilePath"]').val(response.filePath);
                            $(input).closest('.product-field').find('input[name$=".ImageName"]').val(response.fileName);
                        } else {
                            alert('Failed to upload image.');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error: ', error);
                        alert('Error uploading image: ' + error);
                    }
                });
            }
        }
        $(document).ready(function () {
            // Change category value for all fields
            $(".productcategory").on("change", function () {
                let value = $(".productcategory").val();
                $("input[name$='Product_Category']").val(value);
            });

            // Display the error message in the field
            var errorMessage = '@TempData["ErrorMessage"]';
            if (errorMessage && errorMessage.includes("Product code already exists.")) {
                $("#productCodeError").text(errorMessage).show();
            }
            if (errorMessage && errorMessage.includes("Select the Image.")) {
                $("#filepathError").text(errorMessage).show();
            }

            // Add new product field with the same category
            $('#addSameCategoryProduct').click(function () {
                var productFields = $('#productFields');
                var newIndex = productFields.children().length;
                var selectedCategory = productFields.find('select.productcategory').val();

                if (!selectedCategory) {
                    alert("Please choose the category first.");
                    return;
                }

                // Create new field dynamically
                var newField = `
                            <div class="product-field">
                                <div class="form-group row">
                                    <div class="col-md-3">
                                        <input name="[${newIndex}].Product_Category" type="hidden" value="${selectedCategory}" />
                                    </div>
                                    <div class="col-md-3">
                                        <label class="control-label">Product Code</label>
                                        <input class="form-control form-control-sm" name="[${newIndex}].Product_Code" />
                                                <span class="text-danger product-code-error" id="_${newIndex}_Product_Code_Error"></span>
                                    </div>
                                    <div class="col-md-3">
                                        <label class="control-label">Product Name</label>
                                        <input class="form-control form-control-sm" name="[${newIndex}].Product_Name" />
                                        <span class="text-danger" id="productNameError${newIndex}"></span>
                                    </div>
                                    <div class="col-md-3">
                                        <label class="control-label">Product Price</label>
                                        <input  class="form-control form-control-sm" name="[${newIndex}].Product_Price" />
                                                <span class="text-danger" id="_${newIndex}_Product_Price_Error"></span>
                                    </div>
                                    <div class="col-md-3">
                                        <label class="control-label">Description</label>
                                        <input class="form-control form-control-sm" name="[${newIndex}].Product_Description" />
                                        <span class="text-danger" id="productDescriptionError${newIndex}"></span>
                                    </div>
                                    <div class="col-md-3">
                                        <label class="control-label">Available Quantity</label>
                                        <input type="number" class="form-control form-control-sm" name="[${newIndex}].Available_Quantity" />
                                        <span class="text-danger" id="availableQuantityError${newIndex}"></span>
                                    </div>
                                    <div class="col-md-3">
                                        <label class="control-label">Select Image</label>
                                                <div class="file-input-container" ">
                                                <input type="file" class="form-control form-control-sm" name="ImageName" onchange="uploadImage(this, ${newIndex})"/>
                                        <span class="text-danger" id="filepathError${newIndex}"></span>
                                                        <input type="hidden" name="[${newIndex}].FilePath" />
                                        <input type="hidden" name="[${newIndex}].ImageName"/>

                                                <img id="imagePreview${newIndex}" src="#" alt="Image Preview" style="display:none; width:100px; height:100px;"/>
                                            </div>
                                                </div>
                                </div>
                                <button type="button" class="btn btn-danger remove-field">Remove</button>
                            </div>`;

                productFields.append(newField);
            });

            // Remove the product details field
            document.getElementById('productFields').addEventListener('click', function (e) {
                if (e.target && e.target.matches('button.remove-field')) {
                    if (document.getElementsByClassName('product-field').length > 1) {
                        e.target.closest('.product-field').remove();
                    } else {
                        alert("At least one product detail is required.");
                    }
                }
            });

            // Validate form before submitting
            $('#productForm').submit(function (event) {
                event.preventDefault();
                var isValid = true;
                $('#productFields .product-field').each(function (index, field) {
                    var $field = $(field);
                    $field.find('input, select').each(function () {
                        var $input = $(this);
                        if (!$input.val()) {
                            isValid = false;
                            $input.next('.text-danger').text('This field is required.').show();
                        } else {
                            $input.next('.text-danger').hide();
                        }
                    });
                });

                if (isValid) {
                    var formData = new FormData(this);                    
                    $.ajax({
                        url: '/Product/CreateProduct',
                        type: 'POST',
                        data: formData,
                        processData: false,
                        contentType: false,
                        success: function (response) {                           
                            if (response.success) {
                                alert('Products added successfully.');
                                window.location.reload();
                            } else if (response.errors && response.errors.length > 0) {
                                handleErrors(response.errors);
                            } else if (response.errorContent) {
                                console.log(response.errorContent); // Debugging log
                                handleProductCodeError(response.errorContent);
                            } else {
                                alert('Failed to add products.'); 
                            }
                        },
                        error: function (xhr, status, error) {
                            console.error('Error: ', error);
                            console.error('Status: ', status);
                            console.error('Response Text: ', xhr.responseText);
                            alert('Error: ' + xhr.responseText);
                        }
                    });
                }
            });
            function handleErrors(errors) {
                // Clear previous error messages
                $('.text-danger').text('').hide();
                errors.forEach(function (error) {
                    //console.log(error);  // Debugging log
                    if (error.field && error.error) {
                        var field = error.field.replace(/\[/g, '_').replace(/\./g, '_').replace(/\]/g, '');
                        //console.log(field);
                        var errorMessage = error.error;
                        //console.log(errorMessage);
                        $('#'+field+'_Error').text(errorMessage).show();
                    }
                });
            }
            function handleProductCodeError(errorContent) {
                // Clear previous error messages
                $('.text-danger').text('').hide();

                try {
                    var errors = JSON.parse(errorContent);
                    if (errors && Array.isArray(errors)) {
                       // console.log(errors);
                        errors.forEach(function (error) {
                            if (error.field && error.error) {
                                var field = error.field.replace(/\[/g, '_').replace(/\./g, '_').replace(/\]/g, '');
                              //  console.log(field);
                                var errorMessage = error.error;
                              //  console.log(errorMessage);
                                $('#'+field+'_Error').text(errorMessage).show();
                            }
                        });
                    } else {
                        console.error('Invalid error content:', errorContent);
                    }
                } catch (e) {
                    console.error('Error parsing error content:', e);
                }
            }
        });
    </script>
}
