@model IEnumerable<MyCaRt.Models.MyOrderModel>

@{
    ViewData["Title"] = "MyOrders";
}
@if (TempData["AlertCancelMessage"] != null)
{
    <div class="alert alert-danger">
        @TempData["AlertCancelMessage"]
    </div>
}

<h1>My Orders</h1>

@if (!Model.Any())
{
    <p>No orders have been placed.</p>
}
else
{
    var groupedOrders = Model.GroupBy(o => o.OrderId).ToList();
    int orderCounter = 0;
    foreach (var orderGroup in groupedOrders)
    {
        var firstOrderItem = orderGroup.First();
        orderCounter++;
        string orderLabel = orderCounter switch
        {
            1 => "First Order",
            2 => "Second Order",
            3 => "Third Order",
            4 => "Fourth Order",
            _ => $"Order {orderCounter}"
        };
   
        <div class="card mb-3">
            <div class="card-header">
                <p hidden> Order ID: @firstOrderItem.OrderId</p>
                @orderLabel
            </div>
            <div class="card-body">
                <h5 class="card-title">Customer: @firstOrderItem.Customer_FName</h5>
                <p class="card-text">Total Price: @firstOrderItem.TotalPrice</p>
                <p class="card-text">Status: @firstOrderItem.IsPaid</p>
                <table class="table">
                    <thead>
                        <tr>
                            <th>@Html.DisplayNameFor(model => model.Product_Name)</th>
                            <th>@Html.DisplayNameFor(model => model.Quantity)</th>
                            <th>@Html.DisplayNameFor(model => model.OrderDate)</th>
                            <th>@Html.DisplayNameFor(model => model.DeliveryDate)</th>
                            <th>@Html.DisplayNameFor(model => model.DeliveryStatus)</th>

                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in orderGroup)
                        {
                            <tr>
                                <td>@Html.DisplayFor(modelItem => item.Product_Name)</td>
                                <td>@Html.DisplayFor(modelItem => item.Quantity)</td>
                                <td>@Html.DisplayFor(modelItem => item.OrderDate)</td>
                                <td>@Html.DisplayFor(modelItem => item.DeliveryDate)</td>
                                <td>@Html.DisplayFor(modelItem => item.DeliveryStatus)</td>
                            </tr>
                        }
                    </tbody>
                    <div>
                        @{
                            var firstItem = orderGroup.First();
                        }
                        @if ((firstItem.DeliveryStatus == "Canceled" && firstItem.DeliveryDate == null) || firstItem.DeliveryStatus == "Delivered")
                        {
                            <button type="submit" class="btn btn-primary buy-again-btn" data-orderid="@firstItem.OrderId" data-totalprice="@firstItem.TotalPrice">Buy Again</button>
                        }
                        else
                        {
                            <form class="action-links-form" asp-controller="Order" asp-action="CancelOrder" method="post" style="display: inline-block;">
                                <input type="hidden" name="orderId" value="@firstItem.OrderId" />
                                <button type="submit" class="action-links delete" onclick="return confirm('Are you sure you want to Cancel this Order?')"
                                        style="background-color:red;color:black">
                                    Cancel Order
                                </button>
                            </form>
                            <button type="submit" style="display:inline;" class="btn btn-primary buy-again-btn" data-orderid="@firstItem.OrderId" data-totalprice="@firstItem.TotalPrice">Buy Again</button>
                        }

                        
                       
                        
                        
                    </div>
                </table>
              
            </div>
        </div>
    }

}
<style>
    .card {
        margin-top: 20px;
    }

    .card-header {
        background-color: #007bff;
        color: white;
    }

    .card-title {
        margin-bottom: 15px;
    }

    .table {
        margin-top: 15px;
    }
</style>
<div class="modal fade" id="payModal" tabindex="-1" aria-labelledby="payModalLabel" aria-hidden="true">
    <div class="containermodel modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="payModalLabel">Payment</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Payment form or information goes here -->
                <p>Payment details...</p>
                <div class="container">

                    <form id="paymentForm">

                        <div class="row">

                            <div class="col">
                                <h3 class="title">
                                    Billing Address
                                </h3>

                                <div class="inputBox">
                                    <label for="FullName">
                                        Full Name:
                                    </label>
                                    <input type="text" id="FullName" name="FullName"
                                           placeholder="Enter your full name"
                                           required>
                                </div>

                                <div class="inputBox">
                                    <label for="Email">
                                        Email:
                                    </label>
                                    <input type="text" id="Email" name="Email"
                                           placeholder="Enter email address"
                                           required>
                                </div>

                                <div class="inputBox">
                                    <label for="Address">
                                        Address:
                                    </label>
                                    <input type="text" id="Address" name="Address"
                                           placeholder="Enter address"
                                           required>
                                </div>

                                <div class="inputBox">
                                    <label for="City">
                                        City:
                                    </label>
                                    <input type="text" id="City" name="City"
                                           placeholder="Enter city"
                                           required>
                                </div>

                                <div class="flex">

                                    <div class="inputBox">
                                        <label for="State">
                                            State:
                                        </label>
                                        <input type="text" id="State" name="State"
                                               placeholder="Enter state"
                                               required>
                                    </div>

                                    <div class="inputBox">
                                        <label for="ZipCode">
                                            Zip Code:
                                        </label>
                                        <input type="number" id="ZipCode" name="ZipCode"
                                               placeholder="123 456"
                                               required>
                                    </div>

                                </div>

                            </div>
                            <div class="col">
                                <h3 class="title">Payment</h3>

                                <div class="inputBox">
                                    <label for="name">
                                        Card Accepted:
                                    </label>
                                    <img style="width:400px;height:50px" src="~/Image/card.png"
                                         alt="credit/debit card image">
                                </div>

                                <div class="inputBox">
                                    <label for="CardName">
                                        Name On Card:
                                    </label>
                                    <input type="text" id="CardName" name="CardName"
                                           placeholder="Enter card name"
                                           required>
                                </div>

                                <div class="inputBox">
                                    <label for="CardNumber">
                                        Credit Card Number:
                                    </label>
                                    <input type="text" id="CardNumber" name="CardNumber"
                                           placeholder="xxxx-xxxx-xxxx-1234"
                                           maxlength="16" required>
                                </div>

                                <div class="inputBox">
                                    <label for="ExpMonth">Exp Month:</label>
                                    <select name="ExpMonth" id="ExpMonth">
                                        <option value="">Choose month</option>
                                        <option value="January">January</option>
                                        <option value="February">February</option>
                                        <option value="March">March</option>
                                        <option value="April">April</option>
                                        <option value="May">May</option>
                                        <option value="June">June</option>
                                        <option value="July">July</option>
                                        <option value="August">August</option>
                                        <option value="September">September</option>
                                        <option value="October">October</option>
                                        <option value="November">November</option>
                                        <option value="December">December</option>
                                    </select>
                                </div>


                                <div class="flex">
                                    <div class="inputBox">
                                        <label for="ExpYear">Exp Year:</label>
                                        <select name="ExpYear" id="ExpYear">
                                            <option value="">Choose Year</option>
                                            <option value="2023">2023</option>
                                            <option value="2024">2024</option>
                                            <option value="2025">2025</option>
                                            <option value="2026">2026</option>
                                            <option value="2027">2027</option>
                                        </select>
                                    </div>

                                    <div class="inputBox">
                                        <label for="CVV">CVV</label>
                                        <input type="number" id="CVV" name="CVV"
                                               placeholder="1234" required>
                                    </div>
                                </div>

                            </div>

                        </div>

                        <input id="confirm-pay-btn" type="submit" value="Proceed to Checkout"
                               class="submit_btn">
                    </form>

                </div>

            </div>
        </div>
    </div>
</div>


@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script>
    <script>
        $(document).ready(function () {
            // Handle the "Buy Again" button click
            $('.buy-again-btn').on('click', function () {
                //console.log('button is clicked');
                var orderId = $(this).data('orderid');
                //console.log(orderId);
                var totalPrice = $(this).data('totalprice');
                $(this).after('<button id="pay-btn-' + orderId + '" class="btn btn-sm btn-outline-secondary add-to-cart pay-btn" data-orderid="' + orderId + '" data-totalprice="' + totalPrice + '">Pay ' + totalPrice + '</button>');
                $('#pay-btn-' + orderId).on('click', function () {
                    $('#payModal').modal('show');
                });
                $(this).hide();
            });

            // Handle the payment form submission
            $('#paymentForm').on('submit', function (e) {
                e.preventDefault();
                var formData = {
                    FullName: $('#FullName').val(),
                    Email: $('#Email').val(),
                    Address: $('#Address').val(),
                    City: $('#City').val(),
                    State: $('#State').val(),
                    ZipCode: $('#ZipCode').val(),
                    CardName: $('#CardName').val(),
                    CardNumber: $('#CardNumber').val(),
                    ExpMonth: $('#ExpMonth').val(),
                    ExpYear: $('#ExpYear').val(),
                    CVV: $('#CVV').val()
                };
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("StorePayment", "Payment")',
                    data: JSON.stringify(formData),
                    contentType: 'application/json; charset=utf-8',
                    success: function (response) {
                        if (response.paymentId) {
                            alert('Payment placed successfully!');
//console.log(response.paymentId);
                            $('#payModal').modal('hide');

                            // Change the PAY button to ORDER button after the payment process is complete
                            $('.pay-btn').hide();
                            var orderId = $('.pay-btn').data('orderid');
                            $('<button id="order-btn" class="btn btn-sm btn-outline-secondary add-to-cart order-btn data-orderid="' + orderId + '"" style="background-color: green; color: white">Order</button>').insertAfter('.pay-btn');
                            console.log(orderId);

                            // Attach a new click event for the ORDER button
                            $('#order-btn').on('click', function () {
                               // var orderId = $(this).data('orderid');
                                //var orderId = $('.order-btn').data('orderid');
                                console.log(orderId);
                                placeOrder(response.paymentId, orderId); // Call the placeOrder function with the paymentId
                            });
                        } else {
                            alert('Payment placed but no paymentId returned.');
                        }
                    },
                    error: function (xhr, status, error) {
                        alert('Failed to payment: ' + xhr.responseText);
                    }
                });
            });

            // Handle the confirm pay button click
            $('#confirm-pay-btn').on('click', function (event) {
                event.preventDefault(); // Prevent form submission

                // Perform field validation
                var isValid = validatePaymentForm();

                if (isValid) {
                    // Trigger the submission of the payment form
                    $('#paymentForm').submit();
                } else {
                    // Show error messages for invalid fields
                    showValidationErrors();
                }
            });

            // Function to validate the payment form fields
            function validatePaymentForm() {
                var isValid = true;

                // Clear any previous error styles
                $('#payModal input, #payModal select').removeClass('is-invalid');

                // Validate billing address fields
                $('#payModal input[type="text"]').each(function () {
                    if ($(this).val().trim() === '') {
                        isValid = false;
                        $(this).addClass('is-invalid');
                    }
                });

                // Validate credit card fields
                $('#payModal input[type="text"], #payModal select').each(function () {
                    if ($(this).val() === '') {
                        isValid = false;
                        $(this).addClass('is-invalid');
                    }
                });

                // Validate Cardnumber field
                var cardnumber = $('#CardNumber').val();
                if (cardnumber === '' || cardnumber.length !== 16) {
                    isValid = false;
                    $('#CardNumber').addClass('is-invalid');
                }

                // Validate CVV field
                var cvv = $('#CVV').val();
                if (cvv === '' || isNaN(cvv) || cvv.length !== 3) {
                    isValid = false;
                    $('#CVV').addClass('is-invalid');
                }

                // Validate ExpYear field
                var expYear = $('#ExpYear').val();
                if (expYear === '' || isNaN(expYear)) {
                    isValid = false;
                    $('#ExpYear').addClass('is-invalid');
                }

                // Validate ExpMonth field
                var expMonth = $('#ExpMonth').val();
                if (expMonth === '') {
                    isValid = false;
                    $('#ExpMonth').addClass('is-invalid');
                }

                return isValid;
            }

            // Function to show validation error messages
            function showValidationErrors() {
                // Clear any previous error messages
                $('.invalid-feedback').remove();

                // Billing address error messages
                $('#payModal input[type="text"]').each(function () {
                    if ($(this).val().trim() === '') {
                        $(this).after('<div class="invalid-feedback">This field is required.</div>');
                    }
                });

                // Credit card error messages
                $('#payModal select').each(function () {
                    if ($(this).val() === '') {
                        $(this).after('<div class="invalid-feedback">This field is required.</div>');
                    }
                });

                // Cardnumber error message
                var cardnumber = $('#CardNumber').val();
                if (cardnumber === '' || cardnumber.length !== 16) {
                    $('#CardNumber').after('<div class="invalid-feedback">Please enter a 16 digit Card number.</div>');
                }

                // CVV error message
                var cvv = $('#CVV').val();
                if (cvv === '' || isNaN(cvv) || cvv.length !== 3) {
                    $('#CVV').after('<div class="invalid-feedback">Please enter a valid CVV number.</div>');
                }

                // ExpYear error message
                var expYear = $('#ExpYear').val();
                if (expYear === '' || isNaN(expYear)) {
                    $('#ExpYear').after('<div class="invalid-feedback">Please enter a valid ExpYear.</div>');
                }

                // ExpMonth error message
                var expMonth = $('#ExpMonth').val();
                if (expMonth === '') {
                    $('#ExpMonth').after('<div class="invalid-feedback">Please select an ExpMonth.</div>');
                }
            }


            // Function to place order
            function placeOrder(paymentId, orderId) {
                var orderData = {
                    paymentId: paymentId,
                    orderId: orderId
                };
                console.log(orderData);
                $.ajax({
                    type: 'POST',
                    url: '@Url.Action("BuyAgainOrder", "Order")',
                    data: JSON.stringify(orderData),
                    contentType: 'application/json; charset=utf-8',
                    success: function (response) {
                        console.log(response);
                        if (response) {
                            alert('Order placed successfully!');
                            window.location.reload();
                           
                        } else {
                            alert('Failed to place order.');
                        }
                    },
                    error: function (xhr, status, error) {
                        alert('Error in placing order: ' + xhr.responseText);
                    }
                });
            }

        });

        </script>
    }